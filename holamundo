public bool MonodivisasMultidivisasResp(ResponseMonodivisa consultarBuzonResponse, RequestHeader requestHeader)
{
    try
    {
        var hUserId = requestHeader.HUserId;
        var hProvider = requestHeader.HProvider;
        var hSessionId = requestHeader.HSessionId;
        var hClientIp = requestHeader.HClientIp;
        var timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");
        var responseId = Guid.NewGuid().ToString();
        var processingTime = $"{_appTimer.Elapsed.Minutes}m {_appTimer.Elapsed.Seconds}s";

        var traceId = "trace-001";
        var httpCode = "200";
        var systemMsg = "Consulta Exitosa";
        var errorMsg = "";
        var statusCode = "200";
        var message = "Consulta Exitosa";

        var datos = consultarBuzonResponse?.Balances?.Balance;
        if (datos == null || datos.Length == 0)
            return false;

        connection.Open();
        if (!connection.Connect.CheckConfigurationState)
            return false;

        foreach (var balance in datos)
        {
            foreach (var currency in balance.Currencys)
            {
                foreach (var denom in currency.Denominations.Denomination)
                {
                    foreach (var trans in consultarBuzonResponse.Transactions.Transaction)
                    {
                        string sqlQuery = @"
                            INSERT INTO BUZONINTELIGENTE.BUZONCASHBALANCE (
                                BZI05HUSID, BZI06HPROV, BZI07HSESS, BZI08HCLIP, BZI09HTIME,
                                BZI10RPID, BZI11MTTP, BZI12PRTM, BZI13STCD, BZI14MSGC,
                                BZI15TRID, BZI16BCHT, BZI17MSGS, BZI18TPDV,
                                BZI21CDPA, BZI22RESU, BZI23BALA, BZI24TIPO,
                                BZI25CDHB, BZI26FECB, BZI27CDDB, BZI28RAMO, BZI29CODM,
                                BZI30VAL, BZI31QTY, BZI32AMT, BZI33TYP,
                                BZI34ACID, BZI35TRDT, BZI36SPNT, BZI37RCPT,
                                BZI38CAID, BZI39CANA, BZI40TIPTR
                            ) VALUES (
                                ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?
                            )";

                        using (OleDbCommand command = new OleDbCommand(sqlQuery, connection.Connect.OleDbConnection))
                        {
                            command.CommandType = CommandType.Text;
                            command.Parameters.AddWithValue("@BZI05HUSID", hUserId);
                            command.Parameters.AddWithValue("@BZI06HPROV", hProvider);
                            command.Parameters.AddWithValue("@BZI07HSESS", hSessionId);
                            command.Parameters.AddWithValue("@BZI08HCLIP", hClientIp);
                            command.Parameters.AddWithValue("@BZI09HTIME", timestamp);
                            command.Parameters.AddWithValue("@BZI10RPID", responseId);
                            command.Parameters.AddWithValue("@BZI11MTTP", timestamp);
                            command.Parameters.AddWithValue("@BZI12PRTM", processingTime);
                            command.Parameters.AddWithValue("@BZI13STCD", statusCode);
                            command.Parameters.AddWithValue("@BZI14MSGC", message);
                            command.Parameters.AddWithValue("@BZI15TRID", traceId);
                            command.Parameters.AddWithValue("@BZI16BCHT", httpCode);
                            command.Parameters.AddWithValue("@BZI17MSGS", systemMsg);
                            command.Parameters.AddWithValue("@BZI18TPDV", errorMsg);

                            command.Parameters.AddWithValue("@BZI21CDPA", currency.Code);
                            command.Parameters.AddWithValue("@BZI22RESU", consultarBuzonResponse.CountryId);
                            command.Parameters.AddWithValue("@BZI23BALA", balance.BalanceType);
                            command.Parameters.AddWithValue("@BZI24TIPO", balance.BalanceType);
                            command.Parameters.AddWithValue("@BZI25CDHB", balance.DeviceCode);
                            command.Parameters.AddWithValue("@BZI26FECB", balance.DateBalance);
                            command.Parameters.AddWithValue("@BZI27CDDB", balance.DeviceCode);
                            command.Parameters.AddWithValue("@BZI28RAMO", currency.Code);
                            command.Parameters.AddWithValue("@BZI29CODM", currency.Code);

                            command.Parameters.AddWithValue("@BZI30VAL", denom.Value);
                            command.Parameters.AddWithValue("@BZI31QTY", denom.Quantity);
                            command.Parameters.AddWithValue("@BZI32AMT", denom.Amount);
                            command.Parameters.AddWithValue("@BZI33TYP", denom.Type);

                            command.Parameters.AddWithValue("@BZI34ACID", trans.ActualId);
                            command.Parameters.AddWithValue("@BZI35TRDT", trans.TransactonDate);
                            command.Parameters.AddWithValue("@BZI36SPNT", trans.ServicePoint);
                            command.Parameters.AddWithValue("@BZI37RCPT", trans.ReceiptNumber);
                            command.Parameters.AddWithValue("@BZI38CAID", trans.CashierId);
                            command.Parameters.AddWithValue("@BZI39CANA", trans.CashierName);
                            command.Parameters.AddWithValue("@BZI40TIPTR", trans.TipoTrans);

                            int result = command.ExecuteNonQuery();
                            if (result <= 0) return false;
                        }
                    }
                }
            }
        }

        return true;
    }
    catch (Exception ex)
    {
        // log opcional
        return false;
    }
}