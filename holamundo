using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;

public static class Sanitizer
{
    private static readonly Regex _specialCharsRegex = new Regex(@"[^a-zA-Z0-9\s]", RegexOptions.Compiled);
    private static readonly Regex _multiSpaceRegex = new Regex(@"\s{2,}", RegexOptions.Compiled);

    public static string Clean(string input)
    {
        if (string.IsNullOrWhiteSpace(input)) return input;

        // 1. Quitar acentos (ñ y ç se conservan)
        var normalized = input.Normalize(NormalizationForm.FormD);
        var sb = new StringBuilder();
        foreach (var c in normalized)
        {
            var unicodeCategory = CharUnicodeInfo.GetUnicodeCategory(c);
            if (unicodeCategory != UnicodeCategory.NonSpacingMark)
                sb.Append(c);
        }

        string withoutAccents = sb.ToString().Normalize(NormalizationForm.FormC);

        // 2. Eliminar caracteres especiales
        string cleaned = _specialCharsRegex.Replace(withoutAccents, "");

        // 3. Normalizar espacios múltiples
        cleaned = _multiSpaceRegex.Replace(cleaned, " ").Trim();

        return cleaned;
    }
}





//// segundo cod



using Microsoft.AspNetCore.Mvc.Filters;
using System.Reflection;

public class SanitizeInputFilter : IActionFilter
{
    public void OnActionExecuting(ActionExecutingContext context)
    {
        foreach (var argument in context.ActionArguments)
        {
            if (argument.Value != null)
            {
                SanitizeObject(argument.Value);
            }
        }
    }

    public void OnActionExecuted(ActionExecutedContext context) { }

    private void SanitizeObject(object obj)
    {
        if (obj == null) return;

        var properties = obj.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);

        foreach (var prop in properties)
        {
            if (!prop.CanRead || !prop.CanWrite) continue;

            if (prop.PropertyType == typeof(string))
            {
                var value = (string)prop.GetValue(obj);
                if (!string.IsNullOrEmpty(value))
                {
                    prop.SetValue(obj, Sanitizer.Clean(value));
                }
            }
            else if (!prop.PropertyType.IsPrimitive &&
                     !prop.PropertyType.IsEnum &&
                     prop.PropertyType != typeof(DateTime) &&
                     prop.PropertyType != typeof(decimal))
            {
                var nestedObj = prop.GetValue(obj);
                SanitizeObject(nestedObj);
            }
        }
    }
}