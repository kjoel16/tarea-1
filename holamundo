public bool MonodivisasMultidivisasResp(ResponseMonodivisa consultarBuzonResponse, RequestHeader requestHeader)
{
    try
    {
        // Valores en duro para pruebas (sin extraer errores a√∫n)
        string StatusCode = "200";
        string Message = "Consulta Exitosa";
        string traceId = "trace-001";
        string httpCode = "200";
        string systemMsg = "OK";
        string errorMsg = "";

        var hUserId = requestHeader.HUserId;
        var hProvider = requestHeader.HProvider;
        var hSessionId = requestHeader.HSessionId;
        var hClientIp = requestHeader.HClientIp;
        var timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");
        var responseId = Guid.NewGuid().ToString();
        var processingTime = $"{_appTimer.Elapsed.Minutes}m {_appTimer.Elapsed.Seconds}s";

        var valuesList = new List<string>();
        int balanceIndex = 0;

        foreach (var balance in consultarBuzonResponse.Balances.Balance)
        {
            int currencyIndex = 0;
            foreach (var currency in balance.Currencys)
            {
                foreach (var denom in currency.Denominations.Denomination)
                {
                    foreach (var trans in consultarBuzonResponse.Transactions.Transaction)
                    {
                        string row = $"('{hUserId}', '{hProvider}', '{hSessionId}', '{hClientIp}', '{timestamp}', " +
                                     $"'{responseId}', '{timestamp}', '{processingTime}', '{StatusCode}', '{Message}', " +
                                     $"'{traceId}', '{httpCode}', '{systemMsg}', '{errorMsg}', " +
                                     $"'{currency.Code}', '{consultarBuzonResponse.CountryId}', '{balanceIndex}', '{balance.BalanceType}', " +
                                     $"'{balance.DeviceCode}', '{balance.DateBalance}', '{balance.DeviceCode}', '{currencyIndex}', '{currency.Code}', " +
                                     $"'{denom.Value}', '{denom.Quantity}', '{denom.Amount}', '{denom.Type}', " +
                                     $"'{trans.ActualId}', '{trans.TransactonDate}', '{trans.ServicePoint}', '{trans.ReceiptNumber}', " +
                                     $"'{trans.CashierId}', '{trans.CashierName}', '{trans.TipoTrans}')";
                        valuesList.Add(row);
                    }
                }
                currencyIndex++;
            }
            balanceIndex++;
        }

        if (valuesList.Any())
        {
            string insertQuery = @"
                INSERT INTO BuzonCashBalance (
                    BZI05HUSID, BZI06HPROV, BZI07HSESS, BZI08HCLIP, BZI09HTIME,
                    BZI10RPID, BZI11MTTP, BZI12PRTM, BZI13STCD, BZI14MSGC,
                    BZI15TRID, BZI16BCHT, BZI17MSGS, BZI18TPDV,
                    BZI21CDPA, BZI22RESU, BZI23BALA, BZI24TIPO,
                    BZI25CDHB, BZI26FECB, BZI27CDDB, BZI28RAMO, BZI29CODM,
                    BZI30VAL, BZI31QTY, BZI32AMT, BZI33TYP,
                    BZI34ACID, BZI35TRDT, BZI36SPNT, BZI37RCPT,
                    BZI38CAID, BZI39CANA, BZI40TIPTR
                ) VALUES " + string.Join(",", valuesList);

            connection.Open();
            if (connection.Connect.CheckConfigurationState)
            {
                using (var command = new OleDbCommand(insertQuery, connection.Connect.OleDbConnection))
                {
                    int result = command.ExecuteNonQuery();
                    return result > 0;
                }
            }
        }
        return false;
    }
    catch (Exception)
    {
        return false;
    }
}